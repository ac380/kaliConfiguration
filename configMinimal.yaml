---
- name: Configure the Kali Machine
  hosts: localhost
  vars:
    user: "{{ lookup('env', 'USER') }}"
    user_home: "/home/{{user}}"
    zsh_config: "{{ user_home }}/.zshrc"
    docker_gpg_key_url: "https://download.docker.com/linux/debian/gpg"
    docker_repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian bookworm stable"
    burpsuite_extras_dir: "/usr/local/lib/BurpSuite"
    burpsuite_extras_jars:
      jruby:
        jar: jruby-complete.jar
        url: https://repo1.maven.org/maven2/org/jruby/jruby-complete/9.4.0.0/jruby-complete-9.4.0.0.jar
        checksum: sha256:e6817cf528976a50a054910f006ee34df07c4580c8a2a4c8c8d61cda0238a108
      jython:
        jar: jython-standalone.jar
        url: https://repo1.maven.org/maven2/org/python/jython-standalone/2.7.3/jython-standalone-2.7.3.jar
        checksum: sha256:da7f3d829b148bcfa86b059dc964e3a8556fedb021096c8db07e30c66faab9b4
    FirefoxPlugins:
      - "foxyproxy-standard"
      - "wappalyzer"
      
  tasks:
    - name: Remove conflicting vscode.sources file if exists
      become: yes
      file:
        path: /etc/apt/sources.list.d/vscode.sources
        state: absent
        
    - name: Update apt cache
      become: yes
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Add VS Code GPG key
      become: yes
      shell: |
        wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > /usr/share/keyrings/packages.microsoft.gpg
      args:
        creates: /usr/share/keyrings/packages.microsoft.gpg

    - name: Add VS Code repository
      become: yes
      shell: |
        echo "deb [arch=amd64 signed-by=/usr/share/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main" > /etc/apt/sources.list.d/vscode.list
      args:
        creates: /etc/apt/sources.list.d/vscode.list

    - name: Install Visual Studio Code
      become: yes
      apt:
        update_cache: yes
        name: code
        state: present

    - name: Install all required apps
      become: yes
      apt:
        name:  
          - zsh
          - curl
          - dnsrecon
          - enum4linux
          - feroxbuster
          - gobuster
          - impacket-scripts
          - nbtscan
          - nikto
          - nmap
          - onesixtyone
          - oscanner
          - redis-tools
          - smbclient
          - smbmap
          - sslscan
          - whatweb
          - wget
          - alacritty
          - chromium
          - eza
          - seclists
          - ripgrep
          - fd-find
          - unzip
          - fzf
          - bat
          - ansifilter
          - john
          - aircrack-ng
          - hydra
          - burpsuite
          - metasploit-framework
          - rubeus
          - dirsearch
          - sqlmap
          - hashcat
          - responder
          - crackmapexec
          - masscan
          - autorecon
          - exiftool
          - ligolo-ng
          - evil-winrm
          - git
          - pipx
        state: present

    - name: Add custom Zsh configuration
      copy:
        dest: "{{ zsh_config }}"
        content: |
              alias ls='ls --color=auto'
              alias dir='dir --color=auto'
              #alias vdir='vdir --color=auto'
          
              alias grep='grep --color=auto'
              alias fgrep='fgrep --color=auto'
              alias egrep='egrep --color=auto'
              alias diff='diff --color=auto'
              alias ip='ip --color=auto'
          
              export LESS_TERMCAP_mb=$'\E[1;31m'     # begin blink
              export LESS_TERMCAP_md=$'\E[1;36m'     # begin bold
              export LESS_TERMCAP_me=$'\E[0m'        # reset bold/blink
              export LESS_TERMCAP_so=$'\E[01;33m'    # begin reverse video
              export LESS_TERMCAP_se=$'\E[0m'        # reset reverse video
              export LESS_TERMCAP_us=$'\E[1;32m'     # begin underline
              export LESS_TERMCAP_ue=$'\E[0m'        # reset underline
              
          # Set default editor to Vscode
          EDITOR='code'
          
          # Replace ls with exa
          alias ls='exa --group-directories-first --color=always'
          alias ll='exa -lh --group-directories-first --color=always'
          alias la='exa -la --group-directories-first --color=always'
          alias lt='exa -laT --group-directories-first --color=always'  # Tree view
          alias lsg='exa --git --long'  # Git-aware view
          
          # Alias for 'batcat' (a syntax-highlighting replacement for 'cat')
          alias bat='batcat'
          
          # Alias for running AutoRecon (with sudo) and preserving the $PATH
          alias autorecon='sudo env "PATH=$PATH" autorecon --dirbuster.tool dirsearch'
          
          # URL decode function using Python3
          alias urldecode='python3 -c "import sys, urllib.parse as ul; \
              print(ul.unquote_plus(sys.argv[1]))"'
          
          # URL encode function using Python3
          alias urlencode='python3 -c "import sys, urllib.parse as ul; \
              print (ul.quote_plus(sys.argv[1]))"'

          # Shows Tmux shortcuts
          alias tmuxshortcuts='echo "
          Important tmux Shortcuts:
          ===========================
          Prefix: Ctrl + Space

          - Ctrl + n       : Create a new window
          - Ctrl + p       : Switch to the next window
          - Ctrl + o       : Switch to the previous window
          - Alt + q        : Split window vertically (Alt + q)
          - Alt + w        : Split window horizontally (Alt + w)
          - Ctrl + h       : Move left between panes
          - Ctrl + l       : Move right between panes
          - Ctrl + k       : Move up between panes
          - Ctrl + j       : Move down between panes
          - Alt + Right    : Move window to the right (Alt + Right Arrow)
          - Alt + Left     : Move window to the left (Alt + Left Arrow)
          - Alt + h        : Resize pane left (Alt + h)
          - Alt + l        : Resize pane right (Alt + l)
          - Alt + k        : Resize pane up (Alt + k)
          - Alt + j        : Resize pane down (Alt + j)
          "'
          
          # Start a Python HTTP server on port 9000
          alias pws='python3 -m http.server 9000'
          
          # Set up a tunneling interface using ligolo
          alias lgu='sudo ip tuntap add user {{ user }} mode tun ligolo && sudo ip link set ligolo up'
          
          # Add local bin directory to the system PATH
          export PATH=$PATH:/home/{{ user }}/.local/bin        
          
          # Auto Tmux Logging
          if [ -n "$TMUX_PANE" ] && [ "$TMUX_PANE_LOGGING" != "1" ]; then
            export TMUX_PANE_LOGGING=1
          
            # Get timestamps
            DATE_FOLDER=$(date +%d-%b-%Y)              
            TIME_FOLDER=$(date +%Hh%Mm)             
          
            # Set log root with improved naming
            LOG_ROOT="$HOME/tmux_logs/$DATE_FOLDER/$TIME_FOLDER"
          
            # Create colored and normal subfolders
            COLORED_LOGS="$LOG_ROOT/colored"
            NORMAL_LOGS="$LOG_ROOT/normal"
            mkdir -p "$COLORED_LOGS" "$NORMAL_LOGS"
          
            # Get session/window/pane info
            SESSION=$(tmux display-message -p '#S')
            WINDOW=$(tmux display-message -p '#I')
            PANE=$(tmux display-message -p '#P')
          
            # Build log file names
            LOG_PREFIX="${SESSION}_win${WINDOW}_pane${PANE}"
            COLOR_LOG="$COLORED_LOGS/${LOG_PREFIX}.log"
            NORMAL_LOG="$NORMAL_LOGS/${LOG_PREFIX}.log"
          
            # Log both colored and plain output
            tmux pipe-pane -o -t "$TMUX_PANE" "tee \"$COLOR_LOG\" | ansifilter >> \"$NORMAL_LOG\""
          fi

    - name: Add custom Tmux configuration
      copy:
        dest: "{{ user_home }}/.tmux.conf"
        content: |
          set-option -g prefix C-Space
          unbind-key C-b
          bind-key C-Space send-prefix
          
          bind -n M-q split-window -v -c "#{pane_current_path}"
          bind -n M-w split-window -h -c "#{pane_current_path}"
          
          bind -n C-n new-window -c "#{pane_current_path}"
          
          bind -n C-p next-window
          bind -n C-o previous-window
          
          # Move window to the right
          bind-key -n M-Right swap-window -t +1
          
          # Move window to the left
          bind-key -n M-Left swap-window -t -1
          
          bind-key r source-file ~/.tmux.conf \; display-message "~/.tmux.conf reloaded."
          
          setw -g mode-keys vi
          
          set-option -sa terminal-overrides ",xterm*:Tc"
          
          setw -g mouse on
          
          set -g status-position top
          
          set -s escape-time 0
          
          set -g history-limit 100000
          
          set -g display-time 4000
          
          set -g status-interval 1
          
          set -g default-terminal "xterm-256color"
          
          set -g focus-events on
          
          setw -g aggressive-resize on
          
          set -g @plugin 'tmux-plugins/tpm'
          set -g @plugin 'tmux-plugins/tmux-yank'
          set -g @plugin 'tmux-plugins/tmux-sensible'
          set -g @plugin 'tmux-plugins/tmux-logging'
          set -g @plugin 'tmux-plugins/tmux-resurrect'
          set -g @plugin 'tmux-plugins/tmux-continuum'
          set -g @plugin 'tmux-plugins/tmux-open'
          set -g @plugin 'tmux-plugins/tmux-sessionist'
          set -g @plugin 'egel/tmux-gruvbox'
          set -g @tmux-gruvbox 'dark' # or 'dark256', 'light', 'light256'
             
          run '~/.tmux/plugins/tpm/tpm'

    - name: Clone Alacritty Themes
      git:
        repo: "https://github.com/alacritty/alacritty-theme"
        dest: "{{user_home}}/.config/alacritty/"
        version: master
        update: no
    
    - name: Add custom Alacritty configuration
      copy:
        dest: "{{user_home}}/.config/alacritty/alacritty.toml"
        content: |

          [general]
          import = [
          "~/.config/alacritty/themes/themes/gruvbox_material_hard_dark.toml"
          ]
          
          [scrolling]
          history = 100_000
          
          [window]
          dynamic_padding = false
          opacity = 1
          title = "Alacritty"
          
            [window.class]
            general = "Alacritty"
            instance = "Alacritty"
          
            [window.padding]
            x = 10
            y = 10
          
          [font]
          size = 13.5
          
            [font.bold]
            style = "Bold"
          
            [font.bold_italic]
            style = "Mono Bold"
          
            [font.italic]
            style = "Mono Bold"
          
            [font.normal]
          
            [font.offset]
            x = 0
            y = 1
          
          [env]
          TERM = "xterm-256color"

    - name: Ensure tmux plugin directory exists
      file:
        path: "{{ user_home }}/.tmux/plugins"
        state: directory
        mode: '0755'

    - name: Clone TPM (Tmux Plugin Manager)
      git:
        repo: "https://github.com/tmux-plugins/tpm"
        dest: "{{ user_home }}/.tmux/plugins/tpm"
        version: master
        update: no

    - name: Ensure TPM directory is owned by the target user
      file:
        path: "{{ user_home }}/.tmux/plugins"
        state: directory
        recurse: yes
        owner: "{{ user }}"
        group: "{{ user }}"
      
    # Install Docker
    - name: Install Docker GPG key
      become: yes
      get_url:
        url: "{{ docker_gpg_key_url }}"
        dest: /etc/apt/keyrings/docker.gpg

    - name: Add Docker repository
      become: yes
      lineinfile:
        dest: /etc/apt/sources.list.d/docker.list
        line: "{{ docker_repo }}"
        create: yes

    - name: Install Docker packages
      become: yes
      apt:
        update_cache: yes
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present

    - name: Start Docker service
      become: yes
      systemd:
        name: docker
        enabled: yes
        state: started

    - name: Add user to docker group
      become: yes
      user:
        name: "{{ user }}"
        groups: docker
        append: yes

    - name: Create Engagement directory
      file:
        path: "{{ user_home }}/Engagement"
        state: directory
        mode: '0755'
        
    - name: Create Engagement Binaries directory
      file:
        path: "{{ user_home }}/Engagement/Binaries"
        state: directory
        mode: '0755'

    - name: Create Staging Binaries directory
      file:
        path: "{{ user_home }}/Engagement/Staging"
        state: directory
        mode: '0755'

    - name: Install updog via pipx
      command: pipx install updog
      
    - name: Install Penelope via pipx
      command: pipx install git+https://github.com/brightio/penelope

    - name: Download tools to Binaries folder
      get_url:
        url: "{{ item }}"
        dest: "{{ user_home }}/Engagement/Binaries"
        mode: '0755'
      loop:
        - https://github.com/nicocha30/ligolo-ng/releases/download/v0.8.2/ligolo-ng_proxy_0.8.2_linux_amd64.tar.gz


    - name: Download tools to Staging folder
      get_url:
        url: "{{ item }}"
        dest: "{{ user_home }}/Engagement/Staging"
        mode: '0755'
      loop:
        - https://github.com/peass-ng/PEASS-ng/releases/latest/download/linpeas_linux_amd64
        - https://github.com/peass-ng/PEASS-ng/releases/latest/download/linpeas.sh 
        - https://github.com/peass-ng/PEASS-ng/releases/latest/download/linpeas_fat.sh 
        - https://github.com/peass-ng/PEASS-ng/releases/latest/download/winPEASany_ofs.exe 
        - https://github.com/peass-ng/PEASS-ng/releases/latest/download/winPEASx64.exe 
        - https://github.com/peass-ng/PEASS-ng/releases/latest/download/winPEAS.bat 
        - https://github.com/itm4n/PrintSpoofer/releases/download/v1.0/PrintSpoofer64.exe
        - https://github.com/antonioCoco/RoguePotato/releases/download/1.0/RoguePotato.zip
        - https://github.com/nicocha30/ligolo-ng/releases/download/v0.8.2/ligolo-ng_agent_0.8.2_linux_amd64.tar.gz
        - https://github.com/nicocha30/ligolo-ng/releases/download/v0.8.2/ligolo-ng_agent_0.8.2_windows_amd64.zip
        - https://github.com/gentilkiwi/mimikatz/releases/latest/download/mimikatz_trunk.zip
        - https://github.com/jpillora/chisel/releases/download/v1.10.1/chisel_1.10.1_linux_amd64.deb
        - https://github.com/jpillora/chisel/releases/download/v1.10.1/chisel_1.10.1_windows_amd64.gz

    - name: Ensure BurpSuite extras directory exists
      become: yes
      file:
        path: "{{ burpsuite_extras_dir }}"
        state: directory
        mode: '0755'

    - name: Download BurpSuite extra JARs
      become: yes
      get_url:
        url: "{{ item.value.url }}"
        dest: "{{ burpsuite_extras_dir }}/{{ item.value.jar }}"
        checksum: "{{ item.value.checksum }}"
      loop: "{{ burpsuite_extras_jars | dict2items }}"

    - name: Find burp jar file
      become: yes
      find:
        paths: /
        patterns: "burp*.jar"
        recurse: yes
      register: burp_jar_files

    - name: Get latest burp jar path
      become: yes
      set_fact:
        burp_jar: "{{ burp_jar_files.files | sort(attribute='path') | last }}"

    - name: Run BurpSuite headlessly with timeout
      become: yes
      shell: |
        /bin/bash -c "timeout 45 java -Djava.awt.headless=true -jar {{ burp_jar.path }} < <(echo y) &"
      args:
        executable: /bin/bash
      async: 60
      poll: 0

    - name: Wait for BurpSuite to be ready
      wait_for:
        port: 8080
        delay: 10
        timeout: 30

    - name: Download BurpSuite certificate
      get_url:
        url: http://localhost:8080/cert
        dest: /tmp/cacert.der

    - name: "Copying CA Certificate to /usr/local/share/ca-certificates"
      become: yes
      copy:
       src: /tmp/cacert.der
       dest: /usr/local/share/ca-certificates/BurpSuiteCA.der
       owner: root
       group: root
       mode: 0644

    - name: Update Firefox policies
      template:
        src: /tmp/kaliConfiguration/files/policies.json.j2
        dest: "/usr/share/firefox-esr/distribution/policies.json"
      become: true
      become_method: sudo

    - name: Install Firefox extensions
      shell: >
        firefox --headless --install-addon "https://addons.mozilla.org/firefox/downloads/latest/{{ item }}/latest.xpi"
      loop: "{{ FirefoxPlugins }}"
      async: 30  
      poll: 0   
      ignore_errors: true

    - name: Ensure system is fully upgraded
      become: yes
      apt:
        upgrade: full

    # Clean up apt cache
    - name: Clean up unused packages and cache
      become: yes
      apt:
        autoremove: yes
        clean: yes
        
    - name: Display post-installation reminders
      debug:
        msg:
          - "POST-INSTALLATION STEPS:"
          - "xfconf-query -c xfwm4 -p /general/show_dock_shadow -s false"
          - "xfce4-panel-profiles load /tmp/kaliConfiguration/files/panel.tar.bz2"
          - "Tmux Ctrl Space and I to launch TPM"
          - "Reboot"
      when: true
