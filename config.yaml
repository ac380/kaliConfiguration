---
- name: Configure the Kali Machine
  hosts: localhost
  vars:
    user: "{{ lookup('env', 'USER') }}"
    user_home: "/home/{{user}}"
    zsh_config: "{{ user_home }}/.zshrc"
    docker_gpg_key_url: "https://download.docker.com/linux/debian/gpg"
    docker_repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian bookworm stable"
    burpsuite_extras_dir: "/usr/local/lib/BurpSuite"
    burpsuite_extras_jars:
      jruby:
        jar: jruby-complete.jar
        url: https://repo1.maven.org/maven2/org/jruby/jruby-complete/9.4.0.0/jruby-complete-9.4.0.0.jar
        checksum: sha256:e6817cf528976a50a054910f006ee34df07c4580c8a2a4c8c8d61cda0238a108
      jython:
        jar: jython-standalone.jar
        url: https://repo1.maven.org/maven2/org/python/jython-standalone/2.7.3/jython-standalone-2.7.3.jar
        checksum: sha256:da7f3d829b148bcfa86b059dc964e3a8556fedb021096c8db07e30c66faab9b4
    FirefoxPlugins:
      - "foxyproxy-standard"
      - "wappalyzer"
      - "dotgit"
      
  tasks:
    - name: Remove conflicting vscode.sources file if exists
      become: yes
      file:
        path: /etc/apt/sources.list.d/vscode.sources
        state: absent
        
    - name: Update apt cache
      become: yes
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Add VS Code GPG key
      become: yes
      shell: |
        wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > /usr/share/keyrings/packages.microsoft.gpg
      args:
        creates: /usr/share/keyrings/packages.microsoft.gpg

    - name: Add VS Code repository
      become: yes
      shell: |
        echo "deb [arch=amd64 signed-by=/usr/share/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main" > /etc/apt/sources.list.d/vscode.list
      args:
        creates: /etc/apt/sources.list.d/vscode.list

    - name: Install Visual Studio Code
      become: yes
      apt:
        update_cache: yes
        name: code
        state: present

    - name: Install all required apps
      become: yes
      apt:
        name:  
          - zsh
          - curl
          - dnsrecon
          - enum4linux
          - feroxbuster
          - gobuster
          - impacket-scripts
          - nbtscan
          - nikto
          - nmap
          - ffuf
          - onesixtyone
          - oscanner
          - redis-tools
          - smbclient
          - smbmap
          - sslscan
          - whatweb
          - wget
          - alacritty
          - chromium
          - eza
          - seclists
          - ripgrep
          - fd-find
          - unzip
          - fzf
          - bat
          - ansifilter
          - john
          - aircrack-ng
          - hydra
          - burpsuite
          - metasploit-framework
          - rubeus
          - dirsearch
          - sqlmap
          - hashcat
          - responder
          - crackmapexec
          - masscan
          - autorecon
          - exiftool
          - ligolo-ng
          - evil-winrm
          - git
          - pipx
          - freerdp3-x11
        state: present

    - name: Add custom Zsh configuration
      copy:
        dest: "{{ zsh_config }}"
        content: |
          {% raw %}
          # ~/.zshrc file for zsh interactive shells.
          # see /usr/share/doc/zsh/examples/zshrc for examples
          
          setopt autocd          # change directory just by typing its name
          #setopt correct          # auto correct mistakes
          setopt interactivecomments # allow comments in interactive mode
          setopt magicequalsubst     # enable filename expansion for arguments of the form â€˜anything=expressionâ€™
          setopt nonomatch           # hide error message if there is no match for the pattern
          setopt notify          # report the status of background jobs immediately
          setopt numericglobsort     # sort filenames numerically when it makes sense
          setopt promptsubst         # enable command substitution in prompt
          
          WORDCHARS='_-' # Don't consider certain characters part of the word
          
          # hide EOL sign ('%')
          PROMPT_EOL_MARK=""
          
          # configure key keybindings
          bindkey -e                            # emacs key bindings
          bindkey ' ' magic-space                   # do history expansion on space
          bindkey '^U' backward-kill-line               # ctrl + U
          bindkey '^[[3;5~' kill-word               # ctrl + Supr
          bindkey '^[[3~' delete-char               # delete
          bindkey '^[[1;5C' forward-word                # ctrl + ->
          bindkey '^[[1;5D' backward-word               # ctrl + <-
          bindkey '^[[5~' beginning-of-buffer-or-history    # page up
          bindkey '^[[6~' end-of-buffer-or-history          # page down
          bindkey '^[[H' beginning-of-line              # home
          bindkey '^[[F' end-of-line                # end
          bindkey '^[[Z' undo                     # shift + tab undo last action
          
          # enable completion features
          autoload -Uz compinit
          compinit -d ~/.cache/zcompdump
          zstyle ':completion:*:*:*:*:*' menu select
          zstyle ':completion:*' auto-description 'specify: %d'
          zstyle ':completion:*' completer _expand _complete
          zstyle ':completion:*' format 'Completing %d'
          zstyle ':completion:*' group-name ''
          zstyle ':completion:*' list-colors ''
          zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
          zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'
          zstyle ':completion:*' rehash true
          zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
          zstyle ':completion:*' use-compctl false
          zstyle ':completion:*' verbose true
          zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'
          
          # History configurations
          HISTFILE=~/.zsh_history
          HISTSIZE=50000
          SAVEHIST=100000
          setopt hist_expire_dups_first # delete duplicates first when HISTFILE size exceeds HISTSIZE
          setopt hist_ignore_dups       # ignore duplicated commands history list
          setopt hist_ignore_space      # ignore commands that start with space
          setopt hist_verify          # show command with history expansion to user before running it
          setopt share_history         # share command history data
          setopt INC_APPEND_HISTORY
          
          # force zsh to show the complete history
          alias history="history 0"
          
          # configure time format
          TIMEFMT=$'\nreal\t%E\nuser\t%U\nsys\t%S\ncpu\t%P'
          
          # make less more friendly for non-text input files, see lesspipe(1)
          #[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"
          
          # set variable identifying the chroot you work in (used in the prompt below)
          if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
              debian_chroot=$(cat /etc/debian_chroot)
          fi
          
          # uncomment for a colored prompt, if the terminal has the capability; turned
          # off by default to not distract the user: the focus in a terminal window
          # should be on the output of commands, not on the prompt
          force_color_prompt=yes
          
          if [ -n "$force_color_prompt" ]; then
              if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
              # We have color support; assume it's compliant with Ecma-48
              # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
              # a case would tend to support setf rather than setaf.)
              color_prompt=yes
              else
              color_prompt=
              fi
          fi
          
          configure_prompt() {
              prompt_symbol=ã‰¿
              # Skull emoji for root terminal
              #[ "$EUID" -eq 0 ] && prompt_symbol=ðŸ’€
              case "$PROMPT_ALTERNATIVE" in
              twoline)
                  PROMPT=$'%F{%(#.blue.green)}â”Œâ”€â”€${debian_chroot:+($debian_chroot)â”€}${VIRTUAL_ENV:+($(basename $VIRTUAL_ENV))â”€}(%B%F{%(#.red.blue)}%n'$prompt_symbol$'%m%b%F{%(#.blue.green)})-[%B%F{reset}%(6~.%-1~/â€¦/%4~.%5~)%b%F{%(#.blue.green)}]\nâ””â”€%B%(#.%F{red}#.%F{blue}$)%b%F{reset} '
                  # Right-side prompt with exit codes and background processes
                  #RPROMPT=$'%(?.. %? %F{red}%Bâ¨¯%b%F{reset})%(1j. %j %F{yellow}%Bâš™%b%F{reset}.)'
                  ;;
              oneline)
                  PROMPT=$'${debian_chroot:+($debian_chroot)}${VIRTUAL_ENV:+($(basename $VIRTUAL_ENV))}%B%F{%(#.red.blue)}%n@%m%b%F{reset}:%B%F{%(#.blue.green)}%~%b%F{reset}%(#.#.$) '
                  RPROMPT=
                  ;;
              backtrack)
                  PROMPT=$'${debian_chroot:+($debian_chroot)}${VIRTUAL_ENV:+($(basename $VIRTUAL_ENV))}%B%F{red}%n@%m%b%F{reset}:%B%F{blue}%~%b%F{reset}%(#.#.$) '
                  RPROMPT=
                  ;;
              esac
              unset prompt_symbol
          }
          
          # The following block is surrounded by two delimiters.
          # These delimiters must not be modified. Thanks.
          # START KALI CONFIG VARIABLES
          PROMPT_ALTERNATIVE=twoline
          NEWLINE_BEFORE_PROMPT=yes
          # STOP KALI CONFIG VARIABLES
          
          if [ "$color_prompt" = yes ]; then
              # override default virtualenv indicator in prompt
              VIRTUAL_ENV_DISABLE_PROMPT=1
          
              configure_prompt
          
              # enable syntax-highlighting
              if [ -f /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ]; then
              . /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
              ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets pattern)
              ZSH_HIGHLIGHT_STYLES[default]=none
              ZSH_HIGHLIGHT_STYLES[unknown-token]=underline
              ZSH_HIGHLIGHT_STYLES[reserved-word]=fg=cyan,bold
              ZSH_HIGHLIGHT_STYLES[suffix-alias]=fg=green,underline
              ZSH_HIGHLIGHT_STYLES[global-alias]=fg=green,bold
              ZSH_HIGHLIGHT_STYLES[precommand]=fg=green,underline
              ZSH_HIGHLIGHT_STYLES[commandseparator]=fg=blue,bold
              ZSH_HIGHLIGHT_STYLES[autodirectory]=fg=green,underline
              ZSH_HIGHLIGHT_STYLES[path]=bold
              ZSH_HIGHLIGHT_STYLES[path_pathseparator]=
              ZSH_HIGHLIGHT_STYLES[path_prefix_pathseparator]=
              ZSH_HIGHLIGHT_STYLES[globbing]=fg=blue,bold
              ZSH_HIGHLIGHT_STYLES[history-expansion]=fg=blue,bold
              ZSH_HIGHLIGHT_STYLES[command-substitution]=none
              ZSH_HIGHLIGHT_STYLES[command-substitution-delimiter]=fg=magenta,bold
              ZSH_HIGHLIGHT_STYLES[process-substitution]=none
              ZSH_HIGHLIGHT_STYLES[process-substitution-delimiter]=fg=magenta,bold
              ZSH_HIGHLIGHT_STYLES[single-hyphen-option]=fg=green
              ZSH_HIGHLIGHT_STYLES[double-hyphen-option]=fg=green
              ZSH_HIGHLIGHT_STYLES[back-quoted-argument]=none
              ZSH_HIGHLIGHT_STYLES[back-quoted-argument-delimiter]=fg=blue,bold
              ZSH_HIGHLIGHT_STYLES[single-quoted-argument]=fg=yellow
              ZSH_HIGHLIGHT_STYLES[double-quoted-argument]=fg=yellow
              ZSH_HIGHLIGHT_STYLES[dollar-quoted-argument]=fg=yellow
              ZSH_HIGHLIGHT_STYLES[rc-quote]=fg=magenta
              ZSH_HIGHLIGHT_STYLES[dollar-double-quoted-argument]=fg=magenta,bold
              ZSH_HIGHLIGHT_STYLES[back-double-quoted-argument]=fg=magenta,bold
              ZSH_HIGHLIGHT_STYLES[back-dollar-quoted-argument]=fg=magenta,bold
              ZSH_HIGHLIGHT_STYLES[assign]=none
              ZSH_HIGHLIGHT_STYLES[redirection]=fg=blue,bold
              ZSH_HIGHLIGHT_STYLES[comment]=fg=black,bold
              ZSH_HIGHLIGHT_STYLES[named-fd]=none
              ZSH_HIGHLIGHT_STYLES[numeric-fd]=none
              ZSH_HIGHLIGHT_STYLES[arg0]=fg=cyan
              ZSH_HIGHLIGHT_STYLES[bracket-error]=fg=red,bold
              ZSH_HIGHLIGHT_STYLES[bracket-level-1]=fg=blue,bold
              ZSH_HIGHLIGHT_STYLES[bracket-level-2]=fg=green,bold
              ZSH_HIGHLIGHT_STYLES[bracket-level-3]=fg=magenta,bold
              ZSH_HIGHLIGHT_STYLES[bracket-level-4]=fg=yellow,bold
              ZSH_HIGHLIGHT_STYLES[bracket-level-5]=fg=cyan,bold
              ZSH_HIGHLIGHT_STYLES[cursor-matchingbracket]=standout
              fi
          else
              PROMPT='${debian_chroot:+($debian_chroot)}%n@%m:%~%(#.#.$) '
          fi
          unset color_prompt force_color_prompt
          
          toggle_oneline_prompt(){
              if [ "$PROMPT_ALTERNATIVE" = oneline ]; then
              PROMPT_ALTERNATIVE=twoline
              else
              PROMPT_ALTERNATIVE=oneline
              fi
              configure_prompt
              zle reset-prompt
          }
          zle -N toggle_oneline_prompt
          bindkey ^P toggle_oneline_prompt
          
          # If this is an xterm set the title to user@host:dir
          case "$TERM" in
          xterm*|rxvt*|Eterm|aterm|kterm|gnome*|alacritty)
              TERM_TITLE=$'\e]0;${debian_chroot:+($debian_chroot)}${VIRTUAL_ENV:+($(basename $VIRTUAL_ENV))}%n@%m: %~\a'
              ;;
          *)
              ;;
          esac
          
          precmd() {
              # Print the previously configured title
              print -Pnr -- "$TERM_TITLE"
          
              # Print a new line before the prompt, but only if it is not the first line
              if [ "$NEWLINE_BEFORE_PROMPT" = yes ]; then
              if [ -z "$_NEW_LINE_BEFORE_PROMPT" ]; then
                  _NEW_LINE_BEFORE_PROMPT=1
              else
                  print ""
              fi
              fi
          }
          
          # enable color support of ls, less and man, and also add handy aliases
          if [ -x /usr/bin/dircolors ]; then
              test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
              export LS_COLORS="$LS_COLORS:ow=30;44:" # fix ls color for folders with 777 permissions
          
              #alias dir='dir --color=auto'
              #alias vdir='vdir --color=auto'
          
              alias grep='grep --color=auto'
              alias fgrep='fgrep --color=auto'
              alias egrep='egrep --color=auto'
              alias diff='diff --color=auto'
              alias ip='ip --color=auto'
          
              export LESS_TERMCAP_mb=$'\E[1;31m'     # begin blink
              export LESS_TERMCAP_md=$'\E[1;36m'     # begin bold
              export LESS_TERMCAP_me=$'\E[0m'        # reset bold/blink
              export LESS_TERMCAP_so=$'\E[01;33m'    # begin reverse video
              export LESS_TERMCAP_se=$'\E[0m'        # reset reverse video
              export LESS_TERMCAP_us=$'\E[1;32m'     # begin underline
              export LESS_TERMCAP_ue=$'\E[0m'        # reset underline
          
              # Take advantage of $LS_COLORS for completion as well
              zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
              zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
          fi
          
          # enable auto-suggestions based on the history
          if [ -f /usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh ]; then
              . /usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh
              # change suggestion color
              ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=#999'
          fi
          
          # enable command-not-found if installed
          if [ -f /etc/zsh_command_not_found ]; then
              . /etc/zsh_command_not_found
          fi

          # Set default editor to Vscode
          EDITOR='code'
          
          # Replace ls with exa
          alias ls='exa --group-directories-first --color=always'
          alias ll='exa -lh --group-directories-first --color=always'
          alias la='exa -la --group-directories-first --color=always'
          alias lt='exa -laT --group-directories-first --color=always'  # Tree view
          alias lsg='exa --git --long'  # Git-aware view
          
          # Alias for 'batcat' (a syntax-highlighting replacement for 'cat')
          alias bat='batcat'
          
          ## Autorecon Scanning
          alias autorecon='sudo env PATH=$PATH autorecon --dirbuster.wordlist /usr/share/seclists/Discovery/Web-Content/common.txt --only-scans-dir --no-port-dirs'
          
          ## Nmap Scanning
          alias scan='sudo nmap -Pn -n -v -sC -sV -p- --open'
          
          # URL decode function using Python3
          alias urldecode='python3 -c "import sys, urllib.parse as ul; \
              print(ul.unquote_plus(sys.argv[1]))"'
          
          # URL encode function using Python3
          alias urlencode='python3 -c "import sys, urllib.parse as ul; \
              print (ul.quote_plus(sys.argv[1]))"'

          # Shows Tmux shortcuts
          alias tmuxshortcuts='echo "
          Important tmux Shortcuts:
          ===========================
          Prefix: Ctrl + Space

          - Ctrl + n       : Create a new window
          - Ctrl + p       : Switch to the next window
          - Ctrl + o       : Switch to the previous window
          - Alt + q        : Split window vertically (Alt + q)
          - Alt + w        : Split window horizontally (Alt + w)
          - Ctrl + h       : Move left between panes
          - Ctrl + l       : Move right between panes
          - Ctrl + k       : Move up between panes
          - Ctrl + j       : Move down between panes
          - Alt + Right    : Move window to the right (Alt + Right Arrow)
          - Alt + Left     : Move window to the left (Alt + Left Arrow)
          - Alt + h        : Resize pane left (Alt + h)
          - Alt + l        : Resize pane right (Alt + l)
          - Alt + k        : Resize pane up (Alt + k)
          - Alt + j        : Resize pane down (Alt + j)
          - Prefix + [     : Enter Copy Mode
          - Ctrl + V       : If in copy mode, enters box select.
          "'

          alias fzfshortcuts='echo "
          Important fzf Shortcuts:
          ===========================
          Ctrl-R          : fuzzy reverse search (history)
          Ctrl-T          : fuzzy file search (insert filename)
          cat file | fzf  : fuzzy content search
          cmd ** + tab    : fuzzy autocomplete
          "'
          
          alias terminalhortcuts='echo "
          Important terminal Shortcuts:
          ===========================
          Ctrl-a          : line start
          Ctrl-e          : line end
          Ctrl-u          : Delete to start of line
          Ctrl-k          : Delete to end of line
          Ctrl-w          : Delete previous word
          Alt-d           :  Delete next word
          "'
          
          # Start a Python HTTP server on port 9000
          alias pws='python3 -m http.server 9000'
          
          # Set up a tunneling interface using ligolo
          alias lgu='sudo ip tuntap add user {{ user }} mode tun ligolo && sudo ip link set ligolo up'   

          # Auto Tmux Logging
          if [ -n "$TMUX_PANE" ] && [ "$TMUX_PANE_LOGGING" != "1" ]; then
            export TMUX_PANE_LOGGING=1
          
            # Get timestamps
            DATE_FOLDER=$(date +%d-%b-%Y)          
            TIME_FOLDER=$(date +%Hh%Mm)           
          
            # Set log root with improved naming
            LOG_ROOT="$HOME/TmuxLogs/$DATE_FOLDER/$TIME_FOLDER"
          
            # Create colored and normal subfolders
            COLORED_LOGS="$LOG_ROOT/colored"
            NORMAL_LOGS="$LOG_ROOT/normal"
            mkdir -p "$COLORED_LOGS" "$NORMAL_LOGS"
          
            # Get session/window/pane info
            SESSION=$(tmux display-message -p '#S')
            WINDOW=$(tmux display-message -p '#I')
            PANE=$(tmux display-message -p '#P')
          
            # Build log file names
            LOG_PREFIX="${SESSION}_win${WINDOW}_pane${PANE}"
            COLOR_LOG="$COLORED_LOGS/${LOG_PREFIX}.log"
            NORMAL_LOG="$NORMAL_LOGS/${LOG_PREFIX}.log"
          
            # Log both colored and plain output
            tmux pipe-pane -o -t "$TMUX_PANE" "tee \"$COLOR_LOG\" | ansifilter >> \"$NORMAL_LOG\""
          fi
          
          xrdp() {
              local ip="" user="" pass="" domain="" ntlm_hash=""
              while getopts ":i:u:p:d:H:h" opt; do
                  case "$opt" in
                      i) ip="$OPTARG" ;;
                      u) user="$OPTARG" ;;
                      p) pass="$OPTARG" ;;
                      d) domain="$OPTARG" ;;
                      H) ntlm_hash="$OPTARG" ;;
                      h) printf 'Usage: xrdp -i IP [-u user] [-p pass] [-d domain] [-H ntlm_hash]\n'; return 0 ;;
                      \?) printf "Invalid option: -%s\n" "$OPTARG" >&2; return 2 ;;
                      :) printf "Option -%s requires an argument.\n" "$OPTARG" >&2; return 2 ;;
                  esac
              done
          
              if [ -z "$ip" ]; then
                  printf "Error: IP is required. Usage: xrdp -i IP [-u user] [-p pass] [-d domain] [-H ntlm_hash]\n" >&2
                  return 1
              fi
          
              # If any credential beyond just a username is provided, use xfreerdp
              if [ -n "$ntlm_hash" ]; then
                  if [ -z "$user" ]; then
                      printf "Error: -H requires -u <user>\n" >&2
                      return 1
                  fi
                  local domain_arg=""
                  [ -n "$domain" ] && domain_arg="/d:$domain"
                  exec xfreerdp3 /cert:ignore $domain_arg /u:"$user" /pth:"$ntlm_hash" /v:"$ip" /drive:/home/kali/Engagement/Staging,tmp +clipboard +auto-reconnect /title:"RDP - $user@$ip"
              fi
          
              if [ -n "$pass" ] || [ -n "$domain" ]; then
                  if [ -z "$user" ]; then
                      printf "Error: password or domain usage requires -u <user>\n" >&2
                      return 1
                  fi
                  local domain_arg=""
                  [ -n "$domain" ] && domain_arg="/d:$domain"
                  exec xfreerdp3 /cert:ignore $domain_arg /u:"$user" /p:"$pass" /v:"$ip" /drive:/home/kali/Engagement/Staging,tmp +clipboard +auto-reconnect /title:"RDP - $user@$ip"
              fi
          
              # Otherwise use rdesktop: allow optional username only (no password/domain/hash)
              # Build argv array to avoid eval/quoting issues
              args=(-r "disk:staging=/home/kali/Engagement/Staging" -r "clipboard" -T "RDP - ${user:-unknown}@$ip")
              if [ -n "$user" ]; then
                  args+=(-u "$user")
              fi
              args+=("$ip")
              exec rdesktop "${args[@]}"
          }

          serve() {
            ls
            IP=""
            # try tun0
            if ip -4 addr show dev tun0 2>/dev/null | awk '/inet/ {print $2}' | cut -d/ -f1 | read ip; then :; fi
            # the above read runs in a subshell in some shells; use a safer capture:
            IP=$(ip -4 addr show dev tun0 2>/dev/null | awk '/inet/ {print $2}' | cut -d/ -f1 | head -n1)
            if [ -z "$IP" ]; then
              IP=$(ip -4 addr show scope global 2>/dev/null | awk '/inet/ {print $2}' | cut -d/ -f1 | grep -v '^127\.' | head -n1)
            fi
            # fallback to localhost
            : "${IP:=127.0.0.1}"
            echo "Ready-made download commands:"
              echo
              echo "Linux (curl/wget):"
              echo "  curl -O http://$IP/FILE"
              echo "  wget http://$IP/FILE"
          
              echo
              echo "Windows (PowerShell and certutil):"
              echo "  iwr http://$IP/FILE -OutFile FILE"
              echo "  certutil -urlcache -split -f http://$IP/FILE FILE"
            echo
            updog -p 80
          }
         
           # FZF Functionalities
          source /usr/share/doc/fzf/examples/key-bindings.zsh
          source /usr/share/doc/fzf/examples/completion.zsh
          
          {% endraw %}

    - name: Add custom Tmux configuration
      copy:
        dest: "{{ user_home }}/.tmux.conf"
        content: |
          set-option -g prefix C-Space
          unbind-key C-b
          bind-key C-Space send-prefix
          
          bind -n M-q split-window -v -c "#{pane_current_path}"
          bind -n M-w split-window -h -c "#{pane_current_path}"
          
          bind -n C-n new-window -c "#{pane_current_path}"
          
            ##  Swaps to left and right tabs with Ctrl+Arrow
          bind Left previous-window
          bind Right next-window
          
          bind-key r source-file ~/.tmux.conf \; display-message "~/.tmux.conf reloaded."
          
          setw -g mode-keys vi
          
          set-option -sa terminal-overrides ",xterm*:Tc"
          
          setw -g mouse on
          
          set -g status-position top
          
          set -s escape-time 0
          
          set -g history-limit 100000
          
          set -g display-time 4000
          
          set -g status-interval 1
          
          set -g default-terminal "xterm-256color"
          
          set -g focus-events on
          
          # 13) Automatically Sync With System Clipboard (tmux 3.2+)
          set -g set-clipboard on
          
          setw -g aggressive-resize on
          
          set -g @plugin 'tmux-plugins/tpm'
          set -g @plugin 'tmux-plugins/tmux-yank'
          set -g @plugin 'tmux-plugins/tmux-sensible'
          set -g @plugin 'tmux-plugins/tmux-logging'
          set -g @plugin 'tmux-plugins/tmux-resurrect'
          set -g @plugin 'tmux-plugins/tmux-continuum'
          set -g @plugin 'tmux-plugins/tmux-open'
          set -g @plugin 'tmux-plugins/tmux-sessionist'
          set -g @plugin 'egel/tmux-gruvbox'
          set -g @tmux-gruvbox 'dark' # or 'dark256', 'light', 'light256'
          
          run '~/.tmux/plugins/tpm/tpm'
          
          ## COLORSCHEME: gruvbox dark (medium)
          set-option -g status "on"
          
          # default statusbar color
          set-option -g status-style bg="#3c3836",fg="#ebdbb2" # bg=bg1, fg=fg1
          
          # default window title colors
          set-window-option -g window-status-style bg="#504945",fg="#ebdbb2" # bg=bg2, fg=fg1
          
          # default window with an activity alert
          set-window-option -g window-status-activity-style bg="#3c3836",fg="#bdae93" # bg=bg1, fg=fg3
          
          # active window title colors
          set-window-option -g window-status-current-style bg="#fabd2f",fg="#504945" # bg=yellow2, fg=bg2
          
          # pane border
          set-option -g pane-active-border-style fg="#d5c4a1" #fg2
          set-option -g pane-border-style fg="#3c3836" #bg1
          
          # message infos
          set-option -g message-style bg="#504945",fg="#ebdbb2" # bg=bg2, fg=fg1
          
          # writing commands inactive
          set-option -g message-command-style bg="#bdae93",fg="#ebdbb2" # bg=fg3, fg=fg1
          
          # pane number display
          set-option -g display-panes-active-colour "#d5c4a1" #fg2
          set-option -g display-panes-colour "#3c3836" #bg1
          
          # clock
          set-window-option -g clock-mode-colour "#83a598" #blue2
          
          # bell
          set-window-option -g window-status-bell-style bg="#fb4934",fg="#282828" # bg=red2, fg=bg
          
          ## Theme settings mixed with colors
          set-option -g status-justify "left"
          set-option -g status-left-style none
          set-option -g status-left-length "80"
          set-option -g status-right-style none
          set-option -g status-right-length "80"
          set-window-option -g window-status-separator ""
          
          
          set-option -g status-left "#[bg=#665c54,fg=#bdae93] #S #[bg=#3c3836,fg=#665c54,nobold,noitalics,nounderscore]î‚°"
          
          ## Sets a custom date/time status bar to match the others.
          set-option -g status-right "#[bg=#3c3836,fg=#504945,nobold,noitalics,nounderscore]î‚²\
          #[bg=#504945,fg=#ebdbb2] %Y-%m-%d î‚³ %H:%M \
          #[bg=#504945,fg=#bdae93,nobold,noitalics,nounderscore]î‚²\
          #[bg=#bdae93,fg=#3c3836] #h "
          
          set-window-option -g window-status-current-format "#[fg=#3c3836,nobold,noitalics,nounderscore]î‚°#[fg=default] #I î‚±#[bold] #W#{?window_zoomed_flag,*Z,} #[fg=#3c3836,reverse,nobold,noitalics,nounderscore]î‚°"
          set-window-option -g window-status-format "#[fg=#3c3836,noitalics]î‚°#[fg=default] #I î‚± #W #[fg=#3c3836,reverse,noitalics]î‚°"

    - name: Clone Alacritty Themes
      git:
        repo: "https://github.com/alacritty/alacritty-theme"
        dest: "{{user_home}}/.config/alacritty/"
        version: master
        update: no
    
    - name: Add custom Alacritty configuration
      copy:
        dest: "{{user_home}}/.config/alacritty/alacritty.toml"
        content: |

          [general]
          import = [
          "~/.config/alacritty/themes/themes/gruvbox_material_hard_dark.toml"
          ]
          
          [scrolling]
          history = 100_000
          
          [window]
          dynamic_padding = false
          opacity = 1
          title = "Alacritty"
          
          [window.class]
          general = "Alacritty"
          instance = "Alacritty"
          
          [window.padding]
          x = 10
          y = 10
          
          [font]
          size = 13.5
          
          [font.bold]
          style = "Bold"
          
          [font.bold_italic]
          style = "Mono Bold"
          
          [font.italic]
          style = "Mono Bold"
          
          [font.normal]
          
          [font.offset]
          x = 0
          y = 1
          
          [env]
          TERM = "xterm-256color"

    - name: Ensure tmux plugin directory exists
      file:
        path: "{{ user_home }}/.tmux/plugins"
        state: directory
        mode: '0755'

    - name: Install TPM plugins
      shell: |
        # Ensure TPM is cloned
        if [ ! -d ~/.tmux/plugins/tpm ]; then
          git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
        fi
        # Trigger TPM plugin install without manual keypress
        ~/.tmux/plugins/tpm/bin/install_plugins
      args:
        executable: /bin/bash
      
    # Install Docker
    - name: Install Docker GPG key
      become: yes
      get_url:
        url: "{{ docker_gpg_key_url }}"
        dest: /etc/apt/keyrings/docker.gpg

    - name: Add Docker repository
      become: yes
      lineinfile:
        dest: /etc/apt/sources.list.d/docker.list
        line: "{{ docker_repo }}"
        create: yes

    - name: Install Docker packages
      become: yes
      apt:
        update_cache: yes
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present

    - name: Start Docker service
      become: yes
      systemd:
        name: docker
        enabled: yes
        state: started

    - name: Add user to docker group
      become: yes
      user:
        name: "{{ user }}"
        groups: docker
        append: yes

    - name: Create Engagement directory
      file:
        path: "{{ user_home }}/Engagement"
        state: directory
        mode: '0755'
        
    - name: Create Engagement Binaries directory
      file:
        path: "{{ user_home }}/Engagement/Binaries"
        state: directory
        mode: '0755'

    - name: Create Staging Binaries directory
      file:
        path: "{{ user_home }}/Engagement/Staging"
        state: directory
        mode: '0755'

    - name: Install updog via pipx
      command: pipx install updog
      
    - name: Install Penelope via pipx
      command: pipx install git+https://github.com/brightio/penelope

    - name: Install Git Dumper via pipx
      command: pipx install git-dumper

    - name: Install ssh audit via pipx
      command: pipx install ssh-audit
      
    - name: Download tools to Binaries folder
      get_url:
        url: "{{ item }}"
        dest: "{{ user_home }}/Engagement/Binaries"
        mode: '0755'
      loop:
        - https://github.com/nicocha30/ligolo-ng/releases/download/v0.8.2/ligolo-ng_proxy_0.8.2_linux_amd64.tar.gz


    - name: Download tools to Staging folder
      get_url:
        url: "{{ item }}"
        dest: "{{ user_home }}/Engagement/Staging"
        mode: '0755'
      loop:
        - https://github.com/peass-ng/PEASS-ng/releases/latest/download/linpeas_linux_amd64
        - https://github.com/peass-ng/PEASS-ng/releases/latest/download/linpeas.sh 
        - https://github.com/peass-ng/PEASS-ng/releases/latest/download/linpeas_fat.sh 
        - https://github.com/peass-ng/PEASS-ng/releases/latest/download/winPEASany_ofs.exe 
        - https://github.com/peass-ng/PEASS-ng/releases/latest/download/winPEASx64.exe 
        - https://github.com/peass-ng/PEASS-ng/releases/latest/download/winPEAS.bat 
        - https://github.com/itm4n/PrintSpoofer/releases/download/v1.0/PrintSpoofer64.exe
        - https://github.com/antonioCoco/RoguePotato/releases/download/1.0/RoguePotato.zip
        - https://github.com/nicocha30/ligolo-ng/releases/download/v0.8.2/ligolo-ng_agent_0.8.2_linux_amd64.tar.gz
        - https://github.com/nicocha30/ligolo-ng/releases/download/v0.8.2/ligolo-ng_agent_0.8.2_windows_amd64.zip
        - https://github.com/gentilkiwi/mimikatz/releases/latest/download/mimikatz_trunk.zip
        - https://github.com/jpillora/chisel/releases/download/v1.10.1/chisel_1.10.1_linux_amd64.deb
        - https://github.com/jpillora/chisel/releases/download/v1.10.1/chisel_1.10.1_windows_amd64.gz
        - https://github.com/DominicBreuker/pspy/releases/download/v1.2.1/pspy64
        - https://raw.githubusercontent.com/uknowsec/SweetPotato/master/SweetPotato-Webshell-new/bin/Release/SweetPotato.exe
        - https://github.com/SpecterOps/MSSQLHound/blob/main/MSSQLHound.ps1
        - https://github.com/BeichenDream/GodPotato/releases/download/V1.20/GodPotato-NET2.exe
        - https://github.com/BeichenDream/GodPotato/releases/download/V1.20/GodPotato-NET35.exe
        - https://github.com/BeichenDream/GodPotato/releases/download/V1.20/GodPotato-NET4.exe
        - https://github.com/antonioCoco/RunasCs/releases/download/v1.5/RunasCs.zip
        - https://github.com/byronkg/SharpGPOAbuse/releases/download/1.0/SharpGPOAbuse.exe

    - name: Ensure BurpSuite extras directory exists
      become: yes
      file:
        path: "{{ burpsuite_extras_dir }}"
        state: directory
        mode: '0755'

    - name: Download BurpSuite extra JARs
      become: yes
      get_url:
        url: "{{ item.value.url }}"
        dest: "{{ burpsuite_extras_dir }}/{{ item.value.jar }}"
        checksum: "{{ item.value.checksum }}"
      loop: "{{ burpsuite_extras_jars | dict2items }}"

    - name: Update Firefox policies
      template:
        src: /tmp/kaliConfiguration/files/policies.json.j2
        dest: "/usr/share/firefox-esr/distribution/policies.json"
      become: true
      become_method: sudo

    - name: Update keyboard shortcuts
      template:
        src: /tmp/kaliConfiguration/files/xfce4-keyboard-shortcuts.xml
        dest: "{{ user_home }}/.config/xfce4/xfconf/xfce-perchannel-xml/xfce4-keyboard-shortcuts.xml "

    - name: Install Firefox extensions
      shell: >
        firefox --headless --install-addon "https://addons.mozilla.org/firefox/downloads/latest/{{ item }}/latest.xpi"
      loop: "{{ FirefoxPlugins }}"
      async: 300
      poll: 0
      ignore_errors: true

    - name: Remove shadows from panel
      community.general.xfconf:
        channel: xfwm4
        property: /general/show_dock_shadow
        value: false
        value_type: bool

    - name: Load xfce4 panel profile
      command: xfce4-panel-profiles load /tmp/kaliConfiguration/files/panel.tar.bz2

    - name: Ensure system is fully upgraded
      become: yes
      apt:
        upgrade: full

    # Clean up apt cache
    - name: Clean up unused packages and cache
      become: yes
      apt:
        autoremove: yes
        clean: yes

    - name: Disable desktop icons (remove all icons from desktop)
      community.general.xfconf:
        channel: xfce4-keyboard-shortcuts
        property: "/xfwm4/custom/<Alt>Delete"
        state: absent

    - name: Remove workspaces keybind delete.
      community.general.xfconf:
        channel: xfce4-desktop
        property: /desktop-icons/style
        value: 0
        value_type: int

    - name: Copy wallpapers to system-wide backgrounds folder
      become: yes
      copy:
        src: /tmp/kaliConfiguration/wallpapers/gruv/
        dest: /usr/share/backgrounds/gruv/
        mode: '0644'
    
    - name: Set lightdm greeter background
      become: yes
      lineinfile:
        path: /etc/lightdm/lightdm-gtk-greeter.conf
        regexp: '^background = '
        line: 'background = /usr/share/backgrounds/gruv/debian_grey_swirl.png'
    
    - name: Set wallpaper on all monitors and workspaces
      community.general.xfconf:
        channel: xfce4-desktop
        property: "/backdrop/screen0/monitorVirtual1/workspace{{ item }}/last-image"
        value: "/usr/share/backgrounds/gruv/debian_grey_swirl.png"
        value_type: string
      loop:
        - 0
        - 1
        - 2
        - 3
        - 4
        
    - name: Display post-installation reminders
      debug:
        msg:
          - "Reboot"
      when: true
