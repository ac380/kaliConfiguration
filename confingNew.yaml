---
- name: Configure the Kali Machine
  hosts: localhost
  vars:
    user: "{{ lookup('env', 'SUDO_USER') }}"
    user_home: "/home/{{user}}"
    zsh_config: "{{ user_home }}/.zshrc"
    zsh_custom: "{{ user_home }}/.oh-my-zsh/custom"
    docker_gpg_key_url: "https://download.docker.com/linux/debian/gpg"
    docker_repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian bookworm stable"
    image_dir: "/opt/wallpapers/"
    burpsuite_extras_dir: "/usr/local/lib/BurpSuite"
    burpsuite_extras_jars:
      jruby:
        jar: jruby-complete.jar
        url: https://repo1.maven.org/maven2/org/jruby/jruby-complete/9.4.0.0/jruby-complete-9.4.0.0.jar
        checksum: sha256:e6817cf528976a50a054910f006ee34df07c4580c8a2a4c8c8d61cda0238a108
      jython:
        jar: jython-standalone.jar
        url: https://repo1.maven.org/maven2/org/python/jython-standalone/2.7.3/jython-standalone-2.7.3.jar
        checksum: sha256:da7f3d829b148bcfa86b059dc964e3a8556fedb021096c8db07e30c66faab9b4
    FirefoxPlugins:
      - "foxyproxy-standard"
      - "wappalyzer"
      
  tasks:
    - name: Remove conflicting vscode.sources file if exists
      file:
        path: /etc/apt/sources.list.d/vscode.sources
        state: absent
        
    - name: Update apt cache
      become: yes
      apt:
        update_cache: yes
        cache_valid_time: 3600
        
    # Disable swap usage for better performance
    - name: Disable swap (vm.swappiness)
      become: yes
      sysctl:
        name: vm.swappiness
        value: "10"
        state: present

    # Set system logging to volatile for less disk writes
    - name: Configure journald to use volatile storage
      become: yes
      lineinfile:
        path: /etc/systemd/journald.conf
        regexp: '^#Storage='
        line: 'Storage=volatile'

    - name: Add VS Code GPG key
      become: yes
      shell: |
        wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > /usr/share/keyrings/packages.microsoft.gpg
      args:
        creates: /usr/share/keyrings/packages.microsoft.gpg

    - name: Add VS Code repository
      become: yes
      shell: |
        echo "deb [arch=amd64 signed-by=/usr/share/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main" > /etc/apt/sources.list.d/vscode.list
      args:
        creates: /etc/apt/sources.list.d/vscode.list

    - name: Install Visual Studio Code
      become: yes
      apt:
        update_cache: yes
        name: code
        state: present

    - name: Install all required apps
      become: yes
      apt:
        name:  
          - zsh
          - curl
          - dnsrecon
          - enum4linux
          - feroxbuster
          - gobuster
          - impacket-scripts
          - nbtscan
          - nikto
          - nmap
          - onesixtyone
          - oscanner
          - redis-tools
          - smbclient
          - smbmap
          - sslscan
          - whatweb
          - wget
          - chromium
          - alacritty
          - eza
          - seclists
          - ripgrep
          - fd-find
          - unzip
          - fzf
          - bat
          - ansifilter
          - john
          - aircrack-ng
          - hydra
          - burpsuite
          - metasploit-framework
          - rubeus
          - dirsearch
          - sqlmap
          - hashcat
          - responder
          - crackmapexec
          - masscan
          - autorecon
          - exiftool
          - ligolo-ng
          - evil-winrm
          - git
          - pipx
        state: present

    # Copy Chromium .desktop file
    - name: Copy Chromium desktop file
      ansible.builtin.copy:
        src: "/usr/share/applications/chromium.desktop"
        dest: "/home/{{ user }}/Desktop/chromium.desktop"
        mode: '0755'

    # Copy Burp Suite .desktop file
    - name: Copy Burp Suite desktop file
      ansible.builtin.copy:
        src: "/usr/share/applications/kali-burpsuite.desktop"
        dest: "/home/{{ user }}/Desktop/kali-burpsuite.desktop"
        mode: '0755'

    - name: Clone Statistically Likely Usernames
      git:
        repo: https://github.com/insidetrust/statistically-likely-usernames.git
        dest: /usr/share/wordlists/statistically-likely-usernames

    - name: Download and install Kerbrute
      get_url:
        url: https://github.com/ropnop/kerbrute/releases/latest/download/kerbrute_linux_amd64
        dest: /usr/local/bin/kerbrute
        mode: '0755'

    - name: Download Jet Brains Nerd Font
      get_url:
        url: https://github.com/ryanoasis/nerd-fonts/releases/download/v3.3.0/JetBrainsMono.zip
        dest: /tmp/JetBrainsMono.zip
        mode: '0644'

    - name: Extract Jet Brains Nerd Font
      unarchive:
        src: /tmp/JetBrainsMono.zip
        dest: "/usr/local/share/fonts/"
        remote_src: yes

    - name: Download Ubuntu Mono Nerd Font
      get_url:
        url: https://github.com/ryanoasis/nerd-fonts/releases/download/v3.3.0/UbuntuMono.zip
        dest: /tmp/UbuntuMono.zip
        mode: '0644'

    - name: Extract Ubuntu Mono Nerd Font
      unarchive:
        src: /tmp/UbuntuMono.zip
        dest: "/usr/local/share/fonts/"
        remote_src: yes

    - name: Update font cache
      command: fc-cache -fv
      become_user: "{{ user }}"

    - name: Install oh-my-zsh
      become_user: "{{ user }}"
      shell: sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
      args:
        creates: "{{ user_home }}/.oh-my-zsh"

    - name: Install Zsh plugins
      git:
        repo: "{{ item.repo }}"
        dest: "{{ zsh_custom }}/plugins/{{ item.name }}"
      loop:
        - { name: "zsh-syntax-highlighting", repo: "https://github.com/zsh-users/zsh-syntax-highlighting.git" }
        - { name: "zsh-autosuggestions", repo: "https://github.com/zsh-users/zsh-autosuggestions" }
        - { name: "you-should-use", repo: "https://github.com/MichaelAquilina/zsh-you-should-use.git" }
        - { name: "zsh-history-substring-search", repo: "https://github.com/zsh-users/zsh-history-substring-search" }
        - { name: "F-Sy-H", repo: "https://github.com/z-shell/F-Sy-H.git" }

    - name: Ensure Zsh is installed before changing default shell
      command: which zsh
      register: zsh_check
      changed_when: false

    - name: Backup existing .zshrc if it exists
      copy:
        src: "{{ zsh_config }}"
        dest: "{{ zsh_config }}.bak"
        remote_src: yes
        mode: '0644'
      when: ansible.builtin.stat.path is defined and ansible.builtin.stat.path.exists

    - name: Add custom Zsh configuration
      copy:
        dest: "{{ zsh_config }}"
        content: |
          export ZSH="$HOME/.oh-my-zsh"
          
          ZSH_CUSTOM="$HOME/.oh-my-zsh/custom"
          
          ZSH_THEME="bira"

          updatetheme() {
            ZSH_THEMES=(bira dst clean sorin af-magic)
            local NEW_THEME="${ZSH_THEMES[RANDOM % 5]}"
            echo "Switching to random theme: $NEW_THEME"
            sed -i'' -E "s/^ZSH_THEME=.*/ZSH_THEME=\"$NEW_THEME\"/" ~/.zshrc
            source ~/.zshrc
          }
              
          plugins=(
              zsh-interactive-cd
              zsh-autosuggestions
              you-should-use
              zsh-history-substring-search
              F-Sy-H
          )

          source $ZSH/oh-my-zsh.sh
          
          setopt autocd              # change directory just by typing its name
          #setopt correct            # auto correct mistakes
          setopt interactivecomments # allow comments in interactive mode
          setopt magicequalsubst     # enable filename expansion for arguments of the form ‘anything=expression’
          setopt nonomatch           # hide error message if there is no match for the pattern
          setopt notify              # report the status of background jobs immediately
          setopt numericglobsort     # sort filenames numerically when it makes sense
          setopt promptsubst         # enable command substitution in prompt
          
          WORDCHARS=${WORDCHARS//\/}
          
          PROMPT_EOL_MARK=""
          
          bindkey -e                                        # emacs key bindings
          bindkey ' ' magic-space                           # do history expansion on space
          bindkey '^U' backward-kill-line                   # ctrl + U
          bindkey '^[[3;5~' kill-word                       # ctrl + Supr
          bindkey '^[[3~' delete-char                       # delete
          bindkey '^[[1;5C' forward-word                    # ctrl + ->
          bindkey '^[[1;5D' backward-word                   # ctrl + <-
          bindkey '^[[5~' beginning-of-buffer-or-history    # page up
          bindkey '^[[6~' end-of-buffer-or-history          # page down
          bindkey '^[[H' beginning-of-line                  # home
          bindkey '^[[F' end-of-line                        # end
          bindkey '^[[Z' undo                               # shift + tab undo last action
          
          autoload -Uz compinit
          compinit -d ~/.cache/zcompdump
          zstyle ':completion:*:*:*:*:*' menu select
          zstyle ':completion:*' auto-description 'specify: %d'
          zstyle ':completion:*' completer _expand _complete
          zstyle ':completion:*' format 'Completing %d'
          zstyle ':completion:*' group-name ''
          zstyle ':completion:*' list-colors ''
          zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
          zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'
          zstyle ':completion:*' rehash true
          zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
          zstyle ':completion:*' use-compctl false
          zstyle ':completion:*' verbose true
          zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'
          
          HISTFILE=/home/$USER/.zsh_history
          
          HISTSIZE=200000
          SAVEHIST=200000
          
          setopt hist_expire_dups_first # delete duplicates first when HISTFILE size exceeds HISTSIZE
          setopt hist_ignore_dups       # ignore duplicated commands history list
          setopt hist_ignore_space      # ignore commands that start with space
          setopt hist_verify            # show command with history expansion to user before running it
          #setopt share_history         # share command history data
          
          # force zsh to show the complete history
          alias history="history 0"
          
          TIMEFMT=$'\nreal\t%E\nuser\t%U\nsys\t%S\ncpu\t%P'
          
          case "$TERM" in
              xterm-color|*-256color) color_prompt=yes;;
          esac
          
          force_color_prompt=yes
          
          if [ -n "$force_color_prompt" ]; then
              if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
                  # We have color support; assume it's compliant with Ecma-48
                  # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
                  # a case would tend to support setf rather than setaf.)
                  color_prompt=yes
              else
                  color_prompt=
              fi
          fi
          toggle_oneline_prompt(){
              if [ "$PROMPT_ALTERNATIVE" = oneline ]; then
                  PROMPT_ALTERNATIVE=twoline
              else
                  PROMPT_ALTERNATIVE=oneline
              fi
              configure_prompt
              zle reset-prompt
          }
          zle -N toggle_oneline_prompt
          bindkey ^P toggle_oneline_prompt
          
          
          precmd() {
              # Print the previously configured title
              print -Pnr -- "$TERM_TITLE"
          
              # Print a new line before the prompt, but only if it is not the first line
              if [ "$NEWLINE_BEFORE_PROMPT" = yes ]; then
                  if [ -z "$_NEW_LINE_BEFORE_PROMPT" ]; then
                      _NEW_LINE_BEFORE_PROMPT=1
                  else
                      print ""
                  fi
              fi
          }
          
          if [ -x /usr/bin/dircolors ]; then
              test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
              export LS_COLORS="$LS_COLORS:ow=30;44:" # fix ls color for folders with 777 permissions
          
              alias ls='ls --color=auto'
              alias dir='dir --color=auto'
              #alias vdir='vdir --color=auto'
          
              alias grep='grep --color=auto'
              alias fgrep='fgrep --color=auto'
              alias egrep='egrep --color=auto'
              alias diff='diff --color=auto'
              alias ip='ip --color=auto'
          
              export LESS_TERMCAP_mb=$'\E[1;31m'     # begin blink
              export LESS_TERMCAP_md=$'\E[1;36m'     # begin bold
              export LESS_TERMCAP_me=$'\E[0m'        # reset bold/blink
              export LESS_TERMCAP_so=$'\E[01;33m'    # begin reverse video
              export LESS_TERMCAP_se=$'\E[0m'        # reset reverse video
              export LESS_TERMCAP_us=$'\E[1;32m'     # begin underline
              export LESS_TERMCAP_ue=$'\E[0m'        # reset underline
          
              # Take advantage of $LS_COLORS for completion as well
              zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
              zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
          fi
          
          if [ -f /usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh ]; then
              . /usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh
              # change suggestion color
              ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=#999'
          fi
          
          # enable command-not-found if installed
          if [ -f /etc/zsh_command_not_found ]; then
              . /etc/zsh_command_not_found
          fi
          # Set default editor to Vscode
          EDITOR='code'
          
          # Aliases for exa (a modern replacement for 'ls')
          alias ls='exa -T -L=1 -a -B -h -l -g --icons'
          alias lsl='exa -T -L=2 -a -B -h -l -g --icons'
          alias lss='exa -T -L=1 -B -h -l -g --icons'
          
          # Alias for 'batcat' (a syntax-highlighting replacement for 'cat')
          alias bat='batcat'
          
          # Alias to update background
          alias updatebg='/home/{{user}}/.updatewallpaper.sh'
          
          # Alias for running AutoRecon (with sudo) and preserving the $PATH
          alias autorecon='sudo env "PATH=$PATH" autorecon --dirbuster.tool dirsearch'
          
          
          # URL decode function using Python3
          alias urldecode='python3 -c "import sys, urllib.parse as ul; \
              print(ul.unquote_plus(sys.argv[1]))"'
          
          # URL encode function using Python3
          alias urlencode='python3 -c "import sys, urllib.parse as ul; \
              print (ul.quote_plus(sys.argv[1]))"'

          # Shows Tmux shortcuts
          alias tmuxshortcuts='echo "
          Important tmux Shortcuts:
          ===========================
          Prefix: Ctrl + Space

          - Ctrl + n       : Create a new window
          - Ctrl + p       : Switch to the next window
          - Ctrl + o       : Switch to the previous window
          - Alt + q        : Split window vertically (Alt + q)
          - Alt + w        : Split window horizontally (Alt + w)
          - Ctrl + h       : Move left between panes
          - Ctrl + l       : Move right between panes
          - Ctrl + k       : Move up between panes
          - Ctrl + j       : Move down between panes
          - Alt + Right    : Move window to the right (Alt + Right Arrow)
          - Alt + Left     : Move window to the left (Alt + Left Arrow)
          - Alt + h        : Resize pane left (Alt + h)
          - Alt + l        : Resize pane right (Alt + l)
          - Alt + k        : Resize pane up (Alt + k)
          - Alt + j        : Resize pane down (Alt + j)
          "'
          
          # Export the IP address of a target box
          export box="INSERT BOX IP"
          
          # Export Machine name for target:
          export machine="INSERT MACHINE NAME"
          
          # Domain
          export domain="INSERT MACHINE DOMAIN"
          
          # Start a Python HTTP server on port 9000
          alias pws='python3 -m http.server 9000'
          
          # Set up a tunneling interface using ligolo
          alias lgu='sudo ip tuntap add user {{ user }} mode tun ligolo && sudo ip link set ligolo up'
          
          # Add local bin directory to the system PATH
          export PATH=$PATH:/home/{{ user }}/.local/bin        
          
          # Auto Tmux Logging
          if [ -n "$TMUX_PANE" ] && [ "$TMUX_PANE_LOGGING" != "1" ]; then
            export TMUX_PANE_LOGGING=1
          
            # Get timestamps
            DATE_FOLDER=$(date +%d-%b-%Y)              
            TIME_FOLDER=$(date +%Hh%Mm)             
          
            # Set log root with improved naming
            LOG_ROOT="$HOME/tmux_logs/$DATE_FOLDER/$TIME_FOLDER"
          
            # Create colored and normal subfolders
            COLORED_LOGS="$LOG_ROOT/colored"
            NORMAL_LOGS="$LOG_ROOT/normal"
            mkdir -p "$COLORED_LOGS" "$NORMAL_LOGS"
          
            # Get session/window/pane info
            SESSION=$(tmux display-message -p '#S')
            WINDOW=$(tmux display-message -p '#I')
            PANE=$(tmux display-message -p '#P')
          
            # Build log file names
            LOG_PREFIX="${SESSION}_win${WINDOW}_pane${PANE}"
            COLOR_LOG="$COLORED_LOGS/${LOG_PREFIX}.log"
            NORMAL_LOG="$NORMAL_LOGS/${LOG_PREFIX}.log"
          
            # Log both colored and plain output
            tmux pipe-pane -o -t "$TMUX_PANE" "tee \"$COLOR_LOG\" | ansifilter >> \"$NORMAL_LOG\""
          fi

    - name: Add custom Tmux configuration
      copy:
        dest: "{{ user_home }}/.tmux.conf"
        content: |
          set-option -g prefix C-Space
          unbind-key C-b
          bind-key C-Space send-prefix
          
          bind -n M-q split-window -v -c "#{pane_current_path}"
          bind -n M-w split-window -h -c "#{pane_current_path}"
          
          bind -n C-n new-window -c "#{pane_current_path}"
          
          bind -n C-p next-window
          bind -n C-o previous-window
          
          #bind -n C- kill-pane
          
          bind -n C-h select-pane -L
          bind -n C-l select-pane -R
          bind -n C-k select-pane -U
          bind -n C-j select-pane -D
          
          bind -n M-h resize-pane -L 2
          bind -n M-l resize-pane -R 2
          bind -n M-k resize-pane -U 2
          bind -n M-j resize-pane -D 2
          
          
          # Move window to the right
          bind-key -n M-Right swap-window -t +1
          
          # Move window to the left
          bind-key -n M-Left swap-window -t -1
          
          bind-key r source-file ~/.tmux.conf \; display-message "~/.tmux.conf reloaded."
          
          setw -g mode-keys vi
          
          set-option -sa terminal-overrides ",xterm*:Tc"
          
          setw -g mouse on
          
          set -g status-position top
          
          set -s escape-time 0
          
          set -g history-limit 100000
          
          set -g display-time 4000
          
          set -g status-interval 1
          
          set -g default-terminal "xterm-256color"
          
          set -g focus-events on
          
          setw -g aggressive-resize on
          
          set -g @plugin 'tmux-plugins/tpm'
          set -g @plugin 'tmux-plugins/tmux-yank'
          set -g @plugin 'tmux-plugins/tmux-sensible'
          set -g @plugin 'tmux-plugins/tmux-logging'
          set -g @plugin 'tmux-plugins/tmux-resurrect'
          set -g @plugin 'tmux-plugins/tmux-continuum'
          set -g @plugin 'tmux-plugins/tmux-open'
          set -g @plugin 'tmux-plugins/tmux-sessionist'
          
          set -g @plugin "arcticicestudio/nord-tmux"
             
          run '~/.tmux/plugins/tpm/tpm'

    - name: Add custom Alacritty configuration
      copy:
        dest: "/etc/xdg/alacritty/alacritty.toml"
        content: |
          [scrolling]
          history = 100_000
          
          [window]
          dynamic_padding = false
          opacity = 1
          title = "Alacritty"
          
            [window.class]
            general = "Alacritty"
            instance = "Alacritty"
          
            [window.padding]
            x = 10
            y = 10
          
          [font]
          size = 13.5
          
            [font.bold]
            style = "Bold"
          
            [font.bold_italic]
            style = "Mono Bold"
          
            [font.italic]
            style = "Mono Bold"
          
            [font.normal]
          
            [font.offset]
            x = 0
            y = 1
          
          [env]
          TERM = "xterm-256color"
          
          [colors.primary]
          background = "#2e3440"
          foreground = "#d8dee9"
          dim_foreground = "#a5abb6"
          
          [colors.cursor]
          text = "#2e3440"
          cursor = "#d8dee9"
          
          [colors.vi_mode_cursor]
          text = "#2e3440"
          cursor = "#d8dee9"
          
          [colors.selection]
          text = "CellForeground"
          background = "#4c566a"
          
          [colors.search.matches]
          foreground = "CellBackground"
          background = "#88c0d0"
          
          [colors.normal]
          black = "#3b4252"
          red = "#bf616a"
          green = "#a3be8c"
          yellow = "#ebcb8b"
          blue = "#81a1c1"
          magenta = "#b48ead"
          cyan = "#88c0d0"
          white = "#e5e9f0"
          
          [colors.bright]
          black = "#4c566a"
          red = "#bf616a"
          green = "#a3be8c"
          yellow = "#ebcb8b"
          blue = "#81a1c1"
          magenta = "#b48ead"
          cyan = "#8fbcbb"
          white = "#eceff4"
          
          [colors.dim]
          black = "#373e4d"
          red = "#94545d"
          green = "#809575"
          yellow = "#b29e75"
          blue = "#68809a"
          magenta = "#8c738c"
          cyan = "#6d96a5"
          white = "#aeb3bb"

    - name: Ensure tmux plugin directory exists
      file:
        path: "{{ user_home }}/.tmux/plugins"
        state: directory
        mode: '0755'

    - name: Clone TPM (Tmux Plugin Manager)
      git:
        repo: "https://github.com/tmux-plugins/tpm"
        dest: "{{ user_home }}/.tmux/plugins/tpm"
        version: master
        update: no

    - name: Ensure TPM directory is owned by the target user
      file:
        path: "{{ user_home }}/.tmux/plugins"
        state: directory
        recurse: yes
        owner: "{{ user }}"
        group: "{{ user }}"

    - name: Change default shell to Zsh
      user:
        name: "{{ user }}"
        shell: /bin/zsh
      when: zsh_check.stdout != ""

    # Install Docker
    - name: Install Docker GPG key
      become: yes
      get_url:
        url: "{{ docker_gpg_key_url }}"
        dest: /etc/apt/keyrings/docker.gpg

    - name: Add Docker repository
      become: yes
      lineinfile:
        dest: /etc/apt/sources.list.d/docker.list
        line: "{{ docker_repo }}"
        create: yes

    - name: Install Docker packages
      become: yes
      apt:
        update_cache: yes
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present

    - name: Start Docker service
      become: yes
      systemd:
        name: docker
        enabled: yes
        state: started

    - name: Add user to docker group
      become: yes
      user:
        name: "{{ user }}"
        groups: docker
        append: yes

    - name: Create wallpapers directory
      file:
        path: "{{ image_dir }}"
        state: directory
        mode: '0755'

    - name: Create Engagement directory
      file:
        path: "{{ user_home }}/Engagement"
        state: directory
        mode: '0755'
        
    - name: Create Engagement Binaries directory
      file:
        path: "{{ user_home }}/Engagement/Binaries"
        state: directory
        mode: '0755'

    - name: Install updog via pipx
      command: pipx install updog
      
    - name: Install Penelope via pipx
      command: pipx install git+https://github.com/brightio/penelope

    - name: Download tools to /usr/local/bin/
      get_url:
        url: "{{ item }}"
        dest: "{{ user_home }}/Engagement/Binaries"
        mode: '0755'
      loop:
        - https://github.com/gentilkiwi/mimikatz/releases/latest/download/mimikatz_trunk.zip
        - https://github.com/jpillora/chisel/releases/download/v1.10.1/chisel_1.10.1_linux_amd64.deb
        - https://github.com/jpillora/chisel/releases/download/v1.10.1/chisel_1.10.1_windows_amd64.gz
        - https://github.com/peass-ng/PEASS-ng/releases/latest/download/linpeas_linux_amd64
        - https://github.com/peass-ng/PEASS-ng/releases/latest/download/linpeas.sh 
        - https://github.com/peass-ng/PEASS-ng/releases/latest/download/linpeas_fat.sh 
        - https://github.com/peass-ng/PEASS-ng/releases/latest/download/winPEASany_ofs.exe 
        - https://github.com/peass-ng/PEASS-ng/releases/latest/download/winPEASx64.exe 
        - https://github.com/peass-ng/PEASS-ng/releases/latest/download/winPEAS.bat 
        - https://github.com/nicocha30/ligolo-ng/releases/download/v0.8.2/ligolo-ng_agent_0.8.2_linux_amd64.tar.gz
        - https://github.com/nicocha30/ligolo-ng/releases/download/v0.8.2/ligolo-ng_agent_0.8.2_windows_amd64.zip
        - https://github.com/nicocha30/ligolo-ng/releases/download/v0.8.2/ligolo-ng_proxy_0.8.2_linux_amd64.tar.gz
        - https://github.com/itm4n/PrintSpoofer/releases/download/v1.0/PrintSpoofer64.exe
        - https://github.com/antonioCoco/RoguePotato/releases/download/1.0/RoguePotato.zip
    
    - name: Copy new wallpapers in the new wallpaper folder
      copy:
        src: "/tmp/kaliConfiguration/wallpapers"
        dest: "{{ image_dir }}"
        mode: '0644'
      when: true
      
    - name: Grant write permissions to the user for the lightdm-gtk-greeter.conf
      file:
        path: /etc/lightdm/
        owner: "{{ user }}"
        group: "{{ user }}"
        mode: '0755'

    - name: Create random wallpaper script
      copy:
        dest: "/home/{{ user }}/.updatewallpaper.sh"
        content: |
          #!/bin/bash
          # Choose a random wallpaper
          wallpaper=$(find /opt/wallpapers -type f \( -iname "*.jpg" -o -iname "*.png" \) | shuf -n 1)
          
          # Set the wallpaper for XFCE
          xfconf-query -c xfce4-desktop -p $(xfconf-query -c xfce4-desktop -l | grep "workspace0/last-image") -s $wallpaper
          
          # Set the lock screen wallpaper by modifying lightdm-gtk-greeter.conf
          sed -i "s|background = .*|background = $wallpaper|" /etc/lightdm/lightdm-gtk-greeter.conf
          
        mode: '0755'

    - name: Extract Panel Config
      unarchive:
        src: "/tmp/kaliConfiguration/files/panelconfig.tar.bz2"
        dest: "/tmp/"
        remote_src: yes

    - name: Ensure BurpSuite extras directory exists
      file:
        path: "{{ burpsuite_extras_dir }}"
        state: directory
        mode: '0755'

    - name: Download BurpSuite extra JARs
      get_url:
        url: "{{ item.value.url }}"
        dest: "{{ burpsuite_extras_dir }}/{{ item.value.jar }}"
        checksum: "{{ item.value.checksum }}"
      loop: "{{ burpsuite_extras_jars | dict2items }}"

    - name: Find burp jar file
      find:
        paths: /
        patterns: "burp*.jar"
        recurse: yes
      register: burp_jar_files

    - name: Get latest burp jar path
      set_fact:
        burp_jar: "{{ burp_jar_files.files | sort(attribute='path') | last }}"

    - name: Run BurpSuite headlessly with timeout
      become: yes
      shell: |
        /bin/bash -c "timeout 45 java -Djava.awt.headless=true -jar {{ burp_jar.path }} < <(echo y) &"
      args:
        executable: /bin/bash
      async: 60
      poll: 0

    - name: Wait for BurpSuite to be ready
      wait_for:
        port: 8080
        delay: 10
        timeout: 30

    - name: Download BurpSuite certificate
      get_url:
        url: http://localhost:8080/cert
        dest: /tmp/cacert.der

    - name: "Copying CA Certificate to /usr/local/share/ca-certificates"
      copy:
       src: /tmp/cacert.der
       dest: /usr/local/share/ca-certificates/BurpSuiteCA.der
       owner: root
       group: root
       mode: 0644
      become: true
      become_method: sudo

    - name: Download Firefox policies template
      get_url:
        url: https://raw.githubusercontent.com/ac380/kaliConfiguration/refs/heads/main/files/policies.json.j2
        dest: /tmp/policies.json.j2

    - name: Update Firefox policies
      template:
        src: /tmp/policies.json.j2
        dest: "/usr/share/firefox-esr/distribution/policies.json"

    - name: Install Firefox extensions
      shell: >
        firefox --headless --install-addon "https://addons.mozilla.org/firefox/downloads/latest/{{ item }}/latest.xpi"
      loop: "{{ FirefoxPlugins }}"
      async: 30  
      poll: 0   
      ignore_errors: true

    - name: Swap panels
      shell: |
        xfce4-panel-profiles load /tmp/kaliConfiguration/files/newPanel.tar.bz2
        
    # Found through monitoring xfconf-query -c xfwm4 -m and changing the setting
    - name: Remove panel shadows
      shell: |
        xfconf-query -c xfwm4 -p /general/show_dock_shadow -s false

    - name: Ensure system is fully upgraded
      apt:
        upgrade: full

    # Clean up apt cache
    - name: Clean up unused packages and cache
      become: yes
      apt:
        autoremove: yes
        clean: yes
        
    - name: Display post-installation reminders
      debug:
        msg:
          - "POST-INSTALLATION STEPS:"
          - "1. Change your wallpaper and then run 'updatebg'"
          - "2. Update TMUX and plugins, Ctrl+Space and Capital I, Ctrl+Space and Capital U and type all"
          - "3. Import Panel configuration panel from tmp folder."
          - "4. Open Vscode and install the Nord Extension"
          - "5. Reboot"
      when: true
